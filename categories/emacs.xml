<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nathan Hughes' blog (Posts about emacs)</title><link>https://sirsharpest.github.io/</link><description></description><atom:link href="https://sirsharpest.github.io/categories/emacs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2018 &lt;a href="mailto:nathan1hughes@gmail.com"&gt;Nathan Hughes&lt;/a&gt; </copyright><lastBuildDate>Tue, 10 Apr 2018 00:07:17 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>A Ramble About ELisp</title><link>https://sirsharpest.github.io/posts/a-ramble-about-elisp/</link><dc:creator>Nathan Hughes</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;My current language situation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
My first programming language was C++, about 11 years ago I picked up the book "C++ for dummies". Like many teenagers I wanted to make my own games and every resource I came across told me that I would need to learn C++. So I did.
&lt;/p&gt;

&lt;p&gt;
For about 7 of those years I developed solely in C/C++ only ever using Java, HTML and JavaScript for assignments at college. To me I was a person who only cared about efficiency and therefore all other languages were a distraction from creating smooth and lightweight applications.
&lt;/p&gt;

&lt;p&gt;
It was about 3/4 years ago now that I picked up Python as a language, I wanted to scrape websites to get pdf documents which were behind verbose menus and godawful UIs (ahem BlackBoard). I reasoned with myself that Python was a good addition to my kit as it provided a "get it done quickly" tool, I ended up using it more and more. Now all of my work is Python based, all of my analysis is dependant on Python libraries (Matplotlib, Pandas, Scipy etc.).
&lt;/p&gt;

&lt;p&gt;
My point of this initial rant is that I created an annoying situation for myself. When presented with a challenge or task I would consider these two options:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Do I want it written quickly? - Use Python
&lt;/li&gt;
&lt;li&gt;Do I want it to perform efficiently - Use C/C++
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
As someone who genuinely loves programming and playing with new languages, this became annoying. I could no longer find motivation to learn another language well. There was no benefit to me. Sure there are arguments, but for something to impact my work, my hobbies or my efficiency there was no real contender.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Along comes emacs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
I'll spare the story about how emacs changed my life and I was saved from a life of cumbersome IDEs. The short of it is, emacs became my editor around the same time I picked up Python.
&lt;/p&gt;

&lt;p&gt;
A few months ago however I started to truly love emacs, building an editor to be exactly what I needed and wanted. I changed the way that I thought about the code I was writing. It clicked with me that the code itself was just data and so much of the work is how we think about it and manipulate it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;elisp&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Emacs isn't a text editor. It's a lisp interpreter, it just happens to be a great editor when you toy with it enough (paraphrasing the old operating system joke there!).
&lt;/p&gt;

&lt;p&gt;
Really though, this is true. Emacs has given me something which I was wanting for so long. A solid reason to learn a language which I could incorporate into my daily work routine, something which would make me better at my tasks.
&lt;/p&gt;

&lt;p&gt;
A great example (to me) of this is my first elisp function:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;dear-diary&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"This function can be used to create an org file with today as it's file name."&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;find-file&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="s"&gt;"~/Dropbox/Notes/"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format-time-string&lt;/span&gt; &lt;span class="s"&gt;"%Y-%m-%d.org"&lt;/span&gt; &lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For anyone unfamiliar with elisp, it simply opens a file with today's date in my dropbox. It's something I use almost everyday to keep track of what I've done and what I need to follow up on with my projects.
&lt;/p&gt;

&lt;p&gt;
This code however, is nothing to some of the amazing things that other people create!
&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;A bigger bang-for-your-buck demo of CSV transpose &lt;ahref&gt;pic.twitter.com/Z3fTYmOhQP&lt;/ahref&gt;&lt;/p&gt;— emacs gifs (@emacs_gifs) &lt;ahref&gt;October 7, 2016&lt;/ahref&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;


&lt;p&gt;
This beautiful example of transposing a CSV file is just one example I came across the other day.
&lt;/p&gt;

&lt;p&gt;
Maybe it's simple, but writing code which changes how we code is something that I am endlessly fascinated by.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>programming</category><guid>https://sirsharpest.github.io/posts/a-ramble-about-elisp/</guid><pubDate>Mon, 09 Apr 2018 23:09:40 GMT</pubDate></item><item><title>Read CSVs to org tables</title><link>https://sirsharpest.github.io/posts/csvs-to-org-tables/</link><dc:creator>Nathan Hughes</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Turning CSV files into beautiful org-mode tables&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
One thing I find myself doing a lot is working with CSV (comma separated value) files, I store a lot of my data in them. I also find that I need to edit them a lot, or check the values in them. I generally then want to use them in reports that I write, at least I like to put in samples of the data to give readers an indication of what I'm talking about.
&lt;/p&gt;

&lt;p&gt;
Since I write almost everything in org-mode these days I wrote this little function, partially to teach myself more elisp and partially because it actually is useful for me day to day.
It simply takes a file location from the user and formats a nice org mode style table.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;Elisp code&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;org-read-csv&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;find-file&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;read-file-name&lt;/span&gt; &lt;span class="s"&gt;"CSV location:"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;goto-char&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-min&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;re-search-forward&lt;/span&gt; &lt;span class="s"&gt;"\n"&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;replace-match&lt;/span&gt; &lt;span class="s"&gt;"|\n|"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;delete-char&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;re-search-backward&lt;/span&gt; &lt;span class="s"&gt;","&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;replace-match&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-table-align&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>coding</category><category>emacs</category><guid>https://sirsharpest.github.io/posts/csvs-to-org-tables/</guid><pubDate>Sat, 07 Apr 2018 22:04:15 GMT</pubDate></item></channel></rss>